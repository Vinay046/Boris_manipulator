// Generated by gencpp from file boris_manipulator/localizationResponse.msg
// DO NOT EDIT!


#ifndef BORIS_MANIPULATOR_MESSAGE_LOCALIZATIONRESPONSE_H
#define BORIS_MANIPULATOR_MESSAGE_LOCALIZATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace boris_manipulator
{
template <class ContainerAllocator>
struct localizationResponse_
{
  typedef localizationResponse_<ContainerAllocator> Type;

  localizationResponse_()
    : connection_localization(false)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)  {
    }
  localizationResponse_(const ContainerAllocator& _alloc)
    : connection_localization(false)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _connection_localization_type;
  _connection_localization_type connection_localization;

   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;





  typedef boost::shared_ptr< ::boris_manipulator::localizationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::boris_manipulator::localizationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct localizationResponse_

typedef ::boris_manipulator::localizationResponse_<std::allocator<void> > localizationResponse;

typedef boost::shared_ptr< ::boris_manipulator::localizationResponse > localizationResponsePtr;
typedef boost::shared_ptr< ::boris_manipulator::localizationResponse const> localizationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::boris_manipulator::localizationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::boris_manipulator::localizationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::boris_manipulator::localizationResponse_<ContainerAllocator1> & lhs, const ::boris_manipulator::localizationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.connection_localization == rhs.connection_localization &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::boris_manipulator::localizationResponse_<ContainerAllocator1> & lhs, const ::boris_manipulator::localizationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace boris_manipulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::boris_manipulator::localizationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::boris_manipulator::localizationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::boris_manipulator::localizationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75886f154361ea2dcee0a0ccaddcf0d9";
  }

  static const char* value(const ::boris_manipulator::localizationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75886f154361ea2dULL;
  static const uint64_t static_value2 = 0xcee0a0ccaddcf0d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "boris_manipulator/localizationResponse";
  }

  static const char* value(const ::boris_manipulator::localizationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool connection_localization\n"
"float64 position_x\n"
"float64 position_y\n"
"float64 position_z\n"
;
  }

  static const char* value(const ::boris_manipulator::localizationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connection_localization);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localizationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::boris_manipulator::localizationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::boris_manipulator::localizationResponse_<ContainerAllocator>& v)
  {
    s << indent << "connection_localization: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_localization);
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BORIS_MANIPULATOR_MESSAGE_LOCALIZATIONRESPONSE_H
